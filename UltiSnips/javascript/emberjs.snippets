# Emberjs snippets

global !p
def relative_path_to_tests_root(path):
	return '../'*len(path.split('tests')[1].strip(fn + '.js').strip('/').split('/'))
endglobal

global !p
def camelize(tabstop):
	return tabstop[:1].lower() + tabstop.title().replace('-', '')[1:]
endglobal

global !p
def generate_class_name(path, entity_type):
	part = path.split(entity_type + 's')[1]
	filename = part.split('/').pop()
	return ''.join(part.strip(filename).split('/')).title().replace('-', '') + filename.strip('.js').title() + entity_type.title()
endglobal

global !p
def relative_path_to_tests_root(path):
	return '../'*len(path.split('tests')[1].strip(fn + '.js').strip('/').split('/'))
endglobal

snippet eobj
Ember.Object.create($1);
endsnippet

snippet init
init() {
	this._super(...arguments);
	${1}
},
endsnippet

snippet route
/**
 * @module Routes
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = generate_class_name(path, 'route')`
 */
export default Ember.Route.extend({
	${1}
});
endsnippet

snippet actions
actions: {
	${1}
},
endsnippet

snippet model
model(params, transition) {
	${1}
},
endsnippet

snippet prefetch
prefetch(params, transition) {
	${1}
},
endsnippet


snippet component
/**
 * @module Components
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = generate_class_name(path, 'component')`
 */
export default Ember.Component.extend({
	classNames: ['org-`!p snip.rv = snip.basename`']
	${1}
});
endsnippet

snippet mixin
/**
 * @module Mixins
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = generate_class_name(path, 'mixin')`
 */
export default Ember.Mixin.extend({
	${1}
});
endsnippet

snippet iember
import Ember from 'ember';
endsnippet

snippet inject
`!p snip.rv = camelize(t[1])`: Ember.inject.service('$1')
endsnippet

snippet didreceive
didReceiveAttrs() {
	this._super(...arguments);
	$1
},
endsnippet

snippet super
this._super(...arguments);
endsnippet

# Ember Qunit

snippet relpath
import $1 from '`!p snip.rv = relative_path_to_tests_root(path)`$2';
endsnippet

snippet test
test('$1', function(assert) {
  assert.expect(1);
	$2
	assert.ok(true);
});
endsnippet

snippet beforee
beforeEach() {
  $1
},
endsnippet

snippet aftere
afterEach() {
  $1
},
endsnippet

snippet andThen
andThen(() => {
  $1
});
endsnippet

snippet sandboxc
this.sandbox = sinon.sandbox.create();
endsnippet

snippet sandboxr
this.sandbox.restore();
endsnippet

snippet imockserver
import mockServer from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server';
import endpointMap from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server-endpoints';
endsnippet

snippet cmptest
import { moduleForComponent, test } from 'ember-qunit';
import hbs from 'htmlbars-inline-precompile';
import $2 from $3;
moduleForComponent('$1', 'Integration | Component | $1', {
  integration: true,
	beforeEach() {
		this.register('component:$1', $2);
	},
});
test('it renders', function(assert) {
	assert.expect(1);
  this.render(hbs\`{{$1}}\`);
  assert.equal(this.\$().text().trim(), '');
});
endsnippet

snippet itest
import { moduleFor, test } from 'ember-qunit';

moduleFor('$1', '$2', {
  integration: true,
});

test('$3', function(assert) {
	assert.expect(1);
	$4
});
endsnippet

snippet utest
import { module, test } from 'qunit';

module('Unit | $1');

test('$2', function(assert) {
	assert.expect(1);
	$3
});
endsnippet

snippet atest
import { moduleForAcceptance, test } from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/module-for-acceptance';
import mockServer from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server';
import endpointMap from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server-endpoints';

moduleForAcceptance('$1', {
  beforeEach() {
		this.sandbox.create();
    mockServer.setup();
  },
	afterEach() {
		this.sandbox.restore();
	},
});
endsnippet

snippet expect
assert.expect($1);
endsnippet

snippet equal
assert.equal($1, $2, '$3');
endsnippet
