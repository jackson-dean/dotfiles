# Emberjs snippets
snippet init
init() {
	this._super(...arguments);
	${1}
},
endsnippet

snippet route
/**
 * @module Routes
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = snip.basename.title().replace('-', '')`Route
 */
export default Ember.Route.extend({
	${1}
});
endsnippet

snippet actions
actions: {
	${1}
},
endsnippet

snippet model
model() {
	${1}
},
endsnippet

snippet component
/**
 * @module Components
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = snip.basename.title().replace('-', '')`Component
 */
export default Ember.Component.extend({
	classNames: ['org-`!p snip.rv = snip.basename`']
	${1}
});
endsnippet

snippet mixin
/**
 * @module Mixins
 */
import Ember from 'ember';

/**
 * @class `!p snip.rv = snip.basename.title().replace('-', '')`Mixin
 */
export default Ember.Mixin.extend({
	${1}
});
endsnippet

snippet iemb
import Ember from 'ember';
endsnippet

# Ember Qunit

global !p
def relative_path_to_tests_root(path):
	return '../'*len(path.split('tests')[1].strip(fn + '.js').strip('/').split('/'))
endglobal

snippet relpath
import $1 from '`!p snip.rv = relative_path_to_tests_root(path)`$2';
endsnippet

snippet test
test('$1', function(assert) {
  assert.expect(1);
	$2
	assert.ok(true);
});
endsnippet

snippet beforeEach
beforeEach() {
  $1
},
endsnippet

snippet afterEach
afterEach() {
  $1
},
endsnippet

snippet andThen
andThen(() => {
  $1
});
endsnippet

snippet imockserver
import mockServer from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server';
import endpointMap from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server-endpoints';
endsnippet

snippet cmptest
import { moduleForComponent, test } from 'ember-qunit';
import hbs from 'htmlbars-inline-precompile';
import $2 from $3;
moduleForComponent('$1', 'Integration | Component | $1', {
  integration: true,
	beforeEach() {
		this.register('component:$1', $2);
	},
});
test('it renders', function(assert) {
	assert.expect(1);
  this.render(hbs\`{{$1}}\`);
  assert.equal(this.\$().text().trim(), '');
});
endsnippet

snippet itest
import { moduleFor, test } from 'ember-qunit';

moduleFor('$1', '$2', {
  integration: true,
});

test('$3', function(assert) {
	assert.expect(1);
	$4
});
endsnippet

snippet utest
import { module, test } from 'qunit';

module('Unit | $1');

test('$2', function(assert) {
	assert.expect(1);
	$3
});
endsnippet

snippet atest
import { moduleForAcceptance, test } from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/module-for-acceptance';
import mockServer from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server';
import endpointMap from '`!p snip.rv = relative_path_to_tests_root(path)`helpers/organization/mock-server-endpoints';

moduleForAcceptance('$1', {
  beforeEach() {
    mockServer.setup();
  },
});
endsnippet
